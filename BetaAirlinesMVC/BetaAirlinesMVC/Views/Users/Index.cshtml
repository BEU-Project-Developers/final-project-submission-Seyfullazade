@model IEnumerable<BetaAirlinesMVC.Models.User>

@{
    ViewBag.Title = "Users";
    Layout = "~/Views/Shared/_BetaAirlinesLayout.cshtml";
}

<section class="content flexcolumn">
    <h2>@ViewBag.Title</h2>
    <p>
        @Html.ActionLink("Add New User", "Create", null, new { @class = "btn btn-primary addingBtn" })
    </p>

    <div class="search-bar">
        <input type="text" id="searchBox" placeholder="Search users..." class="form-control" onkeyup="filterTable()">
    </div>

    <div class="table-responsive">
        <table class="table table-striped" id="usersTable">
            <thead>
                <tr>
                    <th>@Html.DisplayNameFor(model => model.FirstName) <span class="sort-icon" onclick="sortTable(0)">⇅</span></th>
                    <th>@Html.DisplayNameFor(model => model.LastName) <span class="sort-icon" onclick="sortTable(1)">⇅</span></th>
                    <th>@Html.DisplayNameFor(model => model.Username) <span class="sort-icon" onclick="sortTable(2)">⇅</span></th>
                    <th>Password</th>
                    <th>@Html.DisplayNameFor(model => model.RegisteredDate) <span class="sort-icon" onclick="sortTable(4)">⇅</span></th>
                    <th>@Html.DisplayNameFor(model => model.UserRole.Role) <span class="sort-icon" onclick="sortTable(5)">⇅</span></th>
                    <th>@Html.DisplayNameFor(model => model.Active) <span class="sort-icon" onclick="sortTable(6)">⇅</span></th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.FirstName)</td>
                        <td>@Html.DisplayFor(modelItem => item.LastName)</td>
                        <td>@Html.DisplayFor(modelItem => item.Username)</td>
                        <td>••••••••</td>
                        <td>@Html.DisplayFor(modelItem => item.RegisteredDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.UserRole.Role)</td>
                        <td>@Html.DisplayFor(modelItem => item.Active)</td>
                        <td class="buttons">
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }, new { @class = "btn btn-primary btn-sm" })
                            @Html.ActionLink("Details", "Details", new { id = item.Id }, new { @class = "btn btn-info btn-sm" })
                            @Html.ActionLink("Delete", "Delete", new { id = item.Id }, new { @class = "btn btn-danger btn-sm", onclick = "return confirm('Are you sure you want to delete this user?');" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination">
        @* Implement pagination logic here *@
    </div>
</section>

    <script>
        function filterTable() {
            var input, filter, table, tr, td, i, j, txtValue;
            input = document.getElementById("searchBox");
            filter = input.value.toUpperCase();
            table = document.getElementById("usersTable");
            tr = table.getElementsByTagName("tr");
            for (i = 1; i < tr.length; i++) {
                tr[i].style.display = "none";
                td = tr[i].getElementsByTagName("td");
                for (j = 0; j < td.length; j++) {
                    if (td[j]) {
                        txtValue = td[j].textContent || td[j].innerText;
                        if (txtValue.toUpperCase().indexOf(filter) > -1) {
                            tr[i].style.display = "";
                            break;
                        }
                    }
                }
            }
        }

        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("usersTable");
            switching = true;
            dir = "asc";
            while (switching) {
                switching = false;
                rows = table.rows;
                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>



    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }
        .addingBtn{
            margin:5px 0 15px;
        }
        h1, h2 {
            color: #333;
        }

        .content {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .search-bar {
            margin-bottom: 15px;
        }

            .search-bar input {
                width: 100%;
                padding: 12px 20px;
                border: 1px solid #ccc;
                border-radius: 4px;
                box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
                transition: border-color 0.3s, box-shadow 0.3s;
            }

                .search-bar input:focus {
                    border-color: #66afe9;
                    box-shadow: 0 0 8px rgba(102, 175, 233, 0.6);
                }

        .table-responsive {
            margin-top: 20px;
        }

        .table {
            width: 100%;
            margin-bottom: 20px;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 12px 15px;
                text-align: left;
            }

            .table th {
                background-color: #007bff;
                color: #fff;
            }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: #f9f9f9;
        }

        .table tbody tr:hover {
            background-color: #f1f1f1;
        }

        .sort-icon {
            cursor: pointer;
            margin-left: 5px;
            color: #ccc;
            transition: color 0.3s;
        }

            .sort-icon:hover {
                color: #333;
            }

        .buttons .btn {
            margin-right: 5px;
        }

        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            color: #fff;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s, box-shadow 0.3s;
        }

        .btn-primary {
            background-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
            }

        .btn-info {
            background-color: #17a2b8;
        }

            .btn-info:hover {
                background-color: #117a8b;
            }

        .btn-danger {
            background-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: #c82333;
            }

        .pagination {
            margin-top: 20px;
            display: flex;
            justify-content: center;
            list-style: none;
            padding: 0;
        }

            .pagination li {
                display: inline;
                margin: 0 5px;
            }

                .pagination li a {
                    color: #007bff;
                    text-decoration: none;
                    padding: 8px 12px;
                    border: 1px solid #ddd;
                    border-radius: 4px;
                    transition: background-color 0.3s, border-color 0.3s;
                }

                    .pagination li a:hover {
                        background-color: #007bff;
                        color: #fff;
                        border-color: #007bff;
                    }
    </style>

